
================================= VIRTUAL ENVIRONMENT =================================

Change to a virtual environment

$ cd Documents/CodingDojo/python_stack/

$ source v_environments/python_env/bin/activate

(python_env) $ cd django/django_assignments/



====================================== SHELL =========================================


$ django-admin startproject many_to_many

$ cd many_to_many/

$ python manage.py startapp books_app

Modified settings.py to include the new app. No need to update modify project level urls.py or create an app level url.py while working manipulating the ORM in the shell.


Project Deliverables
--------------------

- Create the Book class model
- Create the Author class model

class Book(models.Model):
	title = models.CharField(max_length=255)
	desc = models.TextField()
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)

class Author(models.Model):
	first_name = models.CharField(max_length=255)
	last_name = models.CharField(max_length=255)
	books = models.ManyToManyField(Book, related_name="authors")
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)


- Create and run the migration files to create the tables in your database

$ python manage.py makemigrations
$ python manage.py migrate


-- Run the shell and import your models

$ python manage.py shell
>>> from books_app.models import Book, Author


1. Query: Create 5 books with the following names: C Sharp, Java, Python, PHP, Ruby
Book.objects.create(title = 'C Sharp', desc = 'This is a book about C#')
Book.objects.create(title = 'Java', desc = 'This is a book about Java')
Book.objects.create(title = 'Python', desc = 'This is a book about Python')
Book.objects.create(title = 'PHP', desc = 'This is a book about PHP')
Book.objects.create(title = 'Ruby', desc = 'This is a book about Ruby')

2. Query: Create 5 different authors: Jane Austen, Emily Dickinson, Fyodor Dostoevksy, William Shakespeare, Lau Tzu
Author.objects.create(first_name = 'Jane', last_name = 'Austen')
Author.objects.create(first_name = 'Emily', last_name = 'Dickinson')
Author.objects.create(first_name = 'Fyodor', last_name = 'Dostoevksy')
Author.objects.create(first_name = 'William', last_name = 'Shakespeare')
Author.objects.create(first_name = 'Lau', last_name = 'Tzu')

3. Add a new text field in the authors table called 'notes'.
class Author(models.Model):
	first_name = models.CharField(max_length=255)
	last_name = models.CharField(max_length=255)
	notes = models.TextField()
	books = models.ManyToManyField(Book, related_name="authors")
	created_at = models.DateTimeField(auto_now_add=True)
	updated_at = models.DateTimeField(auto_now=True)

4. Create and run the migration files to update the table in your database.  
$ python manage.py makemigrations
$ python manage.py migrate

5. Query: Change the name of the C Sharp book to C#
update_c = Book.objects.get(id=1)
update_c.title = 'C#'
update_c.save()

6. Query: Change the first name of the 4th author to Bill
update_authur = Author.objects.get(id=4)
update_authur.first_name = 'Bill'
update_authur.save()

Author.objects.get(id=4).first_name


7. Query: Assign the first author to the first 2 books

In multiple lines: 
first_book = Book.objects.get(id=1)	# retrieve an instance of a book
second_book = Book.objects.get(id=2)	# retrieve an instance of a book
first_author = Author.objects.get(id=1)	# retrieve an instance of a author

first_author.books.add(first_book)	# add first book to the first author
first_author.books.add(second_book)	# add second book to the first author

Single line alternative:
Author.objects.get(id=1).books.add(Book.objects.get(id=1))
Author.objects.get(id=1).books.add(Book.objects.get(id=2))

first_author.books.all() 	# equivalent to next line
Author.objects.get(id=1).books.all()
Book.objects.get(id=2).authors.all()


8. Query: Assign the second author to the first 3 books
third_book = Book.objects.get(id=3)
Author.objects.get(id=2).books.add(first_book)
Author.objects.get(id=2).books.add(second_book)
Author.objects.get(id=2).books.add(third_book)

Author.objects.get(id=2).books.all()
Book.objects.get(id=3).authors.all()


9. Query: Assign the third author to the first 4 books
fourth_book = Book.objects.get(id=4)
Author.objects.get(id=3).books.add(first_book)
Author.objects.get(id=3).books.add(second_book)
Author.objects.get(id=3).books.add(third_book)
Author.objects.get(id=3).books.add(fourth_book)

Author.objects.get(id=3).books.all()
Book.objects.get(id=4).authors.all()


10. Query: Assign the fourth author to the first 5 books (or in other words, all the books)
fifth_book = Book.objects.get(id=5)
Author.objects.get(id=4).books.add(Book.objects.get(id=1))
Author.objects.get(id=4).books.add(Book.objects.get(id=2))
Author.objects.get(id=4).books.add(Book.objects.get(id=3))
Author.objects.get(id=4).books.add(Book.objects.get(id=4))
Author.objects.get(id=4).books.add(Book.objects.get(id=5))


11. Query: Retrieve all the authors for the 3rd book
Author.objects.get(id=3).books.all()
Author.objects.get(id=3).__dict__			# prints ponter to model manager
Book.objects.get(id=3).authors.all()[0].first_name # how to get the first_name of author from a reverse lookup


12. Query: Remove the first author of the 3rd book	# note this is not the same as delete

CORRECT - 
Book.objects.get(id=3).authors.remove(Author.objects.first())

- Book.objects.get(id=3).authors.first().delete() -  WRONG
- (4, {'books_app.Author_books': 3, 'books_app.Author': 1})
- Book.objects.get(id=3).authors.all()


13. Add the fifth author to the second book

Author.objects.get(id=5).first_name
Book.objects.get(id=3).authors.all()[0].first_name
Author.objects.get(id=5).books.add(second_book)


14. Get all books the third author is a part of

Author.objects.get(id=3).books.all()


15. Query: Find all the authors that contributed to the 5th book
Book.objects.get(id=5).authors.all()
Book.objects.get(id=5).authors.all()[0].first_name